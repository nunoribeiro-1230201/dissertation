@misc{atlassian-availability,
	title        = {{Reliability vs availability: Understanding the differences}},
	author       = {Atlassian},
	url          = {https://www.atlassian.com/incident-management/kpis/reliability-vs-availability},
	note         = {Accessed at 16.10.2024}
}
@misc{aws-challenges-dist-sys,
	title        = {{Challenges with distributed systems}},
	author       = {AWS - Amazon},
	url          = {https://aws.amazon.com/builders-library/challenges-with-distributed-systems/},
	note         = {Accessed at 03.11.2024}
}
@misc{ibm-cap-theorem,
	title        = {{What is the CAP theorem?}},
	author       = {IBM},
	year         = 2024,
	month        = 8,
	url          = {https://www.ibm.com/topics/cap-theorem},
	note         = {Accessed at 03.11.2024}
}
@misc{aws-decentralization,
	title        = {{What is Decentralization? - Decentralization in Blockchain Explained - AWS}},
	author       = {AWS - Amazon},
	url          = {https://aws.amazon.com/web3/decentralization-in-blockchain/},
	note         = {Accessed at 03.11.2024}
}
@misc{go-docs,
	title        = {{Official documentation of Go programming language}},
	author       = {Go},
	url          = {https://go.dev/doc//},
	note         = {Accessed at 10.11.2024}
}
@inproceedings{Fayyaz2018,
	title        = {Fault-Tolerant Distributed Attitude and Orbit Control System for Space Applications},
	author       = {Vladimirova, Tanya and Fayyaz, Muhammad},
	year         = 2018,
	booktitle    = {2018 NASA/ESA Conference on Adaptive Hardware and Systems (AHS)},
	volume       = {},
	number       = {},
	pages        = {43--50},
	doi          = {10.1109/AHS.2018.8541486},
	keywords     = {Task analysis;Orbits;Space vehicles;Attitude control;Position measurement;Magnetic sensors;Fault-Tolerant;Distributed;Attitude Orbit and Control System;Multiprocessor System-on-chip;Task Migration}
}
@inproceedings{Tanenbaum1988,
	title        = {Distributed programming with shared data},
	author       = {Bal, H.E. and Tanenbaum, A.S.},
	year         = 1988,
	booktitle    = {Proceedings. 1988 International Conference on Computer Languages},
	volume       = {},
	number       = {},
	pages        = {82--91},
	doi          = {10.1109/ICCL.1988.13046},
	keywords     = {Message passing;Object oriented modeling;Operating systems;Proposals;Computer languages;Logic programming;Computer science;Parallel programming;Explosives;Computer aided instruction}
}
@inproceedings{Koster2016,
	title        = {43 years of actors: a taxonomy of actor models and their key properties},
	author       = {De Koster, Joeri and Van Cutsem, Tom and De Meuter, Wolfgang},
	year         = 2016,
	booktitle    = {Proceedings of the 6th International Workshop on Programming Based on Actors, Agents, and Decentralized Control},
	location     = {Amsterdam, Netherlands},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {AGERE 2016},
	pages        = {31–40},
	doi          = {10.1145/3001886.3001890},
	isbn         = 9781450346399,
	url          = {https://doi.org/10.1145/3001886.3001890},
	abstract     = {The Actor Model is a message passing concurrency model that was originally proposed by Hewitt et al. in 1973. It is now 43 years later and since then researchers have explored a plethora of variations on this model. This paper presents a history of the Actor Model throughout those years. The goal of this paper is not to provide an exhaustive overview of every actor system in existence but rather to give an overview of some of the exemplar languages and libraries that influenced the design and rationale of other actor systems throughout those years. This paper therefore shows that most actor systems can be roughly classified into four families, namely: Classic Actors, Active Objects, Processes and Communicating Event-Loops. This paper also defines the Isolated Turn Principle as a unifying principle across those four families. Additionally this paper lists some of the key properties along which actor systems can be evaluated and formulates some general insights about the design and rationale of the different actor families across those dimensions.},
	numpages     = 10,
	keywords     = {Concurrency, Actor Model}
}
@article{Hoare1988,
	title        = {The laws of OCCAM programming},
	author       = {A.W. Roscoe and C.A.R. Hoare},
	year         = 1988,
	journal      = {Theoretical Computer Science},
	volume       = 60,
	number       = 2,
	pages        = {177--229},
	doi          = {https://doi.org/10.1016/0304-3975(88)90049-7},
	issn         = {0304-3975},
	url          = {https://www.sciencedirect.com/science/article/pii/0304397588900497},
	abstract     = {One of the attractive features of occam is the large number of memorable algebraic laws which exist relating programs. We investigate these laws and, by discovering a normal form for WHILE-free programs, show that they completely characterise the language's semantics.}
}
@inproceedings{Hewitt1973,
	title        = {A universal modular ACTOR formalism for artificial intelligence},
	author       = {Hewitt, Carl and Bishop, Peter and Steiger, Richard},
	year         = 1973,
	booktitle    = {Proceedings of the 3rd International Joint Conference on Artificial Intelligence},
	location     = {Stanford, USA},
	publisher    = {Morgan Kaufmann Publishers Inc.},
	address      = {San Francisco, CA, USA},
	series       = {IJCAI'73},
	pages        = {235–245},
	abstract     = {This paper proposes a modular ACTOR architecture and definitional method for artificial intelligence that is conceptually based on a single kind of object: actors [or, if you will, virtual processors, activation frames, or streams]. The formalism makes no presuppositions about the representation of primitive data structures and control structures. Such structures can be programmed, micro-coded, or hard wired in a uniform modular fashion. In fact it is impossible to determine whether a given object is "really" represented as a list, a vector, a hash table, a function, or a process. The architecture will efficiently run the coming generation of PLANNER-like artificial intelligence languages including those requiring a high degree of parallelism. The efficiency is gained without loss of programming generality because it only makes certain actors more efficient; it does not change their behavioral characteristics. The architecture is general with respect to control structure and does not have or need goto, interrupt, or semaphore primitives. The formalism achieves the goals that the disallowed constructs are intended to achieve by other more structured methods.},
	numpages     = 11
}
