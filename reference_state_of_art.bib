@inproceedings{Valkov2018,
   abstract = {Servers are a key element of current IT infrastructures, and must often deal with large numbers of concurrent requests. The programming language used to construct the server has an important role in engineering efficient server software, and must support massive concurrency on multicore machines with low communication and synchronisation overheads. This paper investigates 12 highly concurrent programming languages suitable for engineering servers, and analyses three representative languages in detail: Erlang, Go, and Scala with Akka. We have designed three server benchmarks that analyse key performance characteristics of the languages. The benchmark results suggest that where minimising message latency is crucial, Go and Erlang are best; that Scala with Akka is capable of supporting the largest number of dormant processes; that for servers that frequently spawn processes Erlang and Go minimise creation time; and that for constantly communicating processes Go provides the best throughput.},
   author = {Ivan Valkov and Natalia Chechina and Phil Trinder},
   doi = {10.1145/3167132.3167144},
   isbn = {9781450351911},
   booktitle = {Proceedings of the ACM Symposium on Applied Computing},
   keywords = {Akka,Erlang,Go,Programming languages,Scala,Server applications},
   month = {4},
   pages = {218-225},
   publisher = {Association for Computing Machinery},
   title = {Comparing languages for engineering server software: Erlang, go, and scala with akka},
   year = {2018},
}
@misc{Cutajar2023,
   author = {James Cutajar},
   isbn = {9781633438385},
   title = {Learn Concurrent Programming with Go},
   year = {2023},
}
@book{Abraham2023,
   author = {Francisco Lopez-Sancho Abraham},
   isbn = {9781617299216},
   publisher = {Simon and Schuster},
   title = {Akka in Action, Second Edition},
   year = {2023},
}
@book{Juric2024,
   author = {Saša Jurić and Francesco Cesarini},
   isbn = {9781633438514},
   pmid = {9781633438514},
   title = {Elixir in Action, Third Edition},
   year = {2024},
}
@article{LeBrun2021,
   author = {Matthew Alan Le Brun and Duncan Paul Attard and Adrian Francalanza},
   city = {New York, NY, USA},
   doi = {10.1145/3471871.3472963},
   isbn = {9781450386128},
   journal = {Proceedings of the 20th ACM SIGPLAN International Workshop on Erlang},
   month = {8},
   pages = {2-14},
   publisher = {ACM},
   title = {Graft: general purpose raft consensus in Elixir},
   year = {2021},
}
@inproceedings{Cassola2020,
   abstract = {Elixir is a functional programming language with dynamic typing. In this paper we propose a type system that makes it possible to perform static type-checking on a significant fragment of Elixir. An important feature of the type system we introduce is that it does not require any syntactic change to the language. Type information is provided by means of function signatures which are declared in terms of Elixir typespec directives. The proposed type system is based on subtyping and is backward compatible, as it allows the presence of untyped code fragments. We have implemented a prototype of the type-checker in Elixir itself.},
   author = {Mauricio Cassola and Agustín Talagorria and Alberto Pardo and Marcos Viera},
   doi = {10.1145/3427081.3427084},
   isbn = {9781450389433},
   booktitle = {ACM International Conference Proceeding Series},
   keywords = {elixir,functional programming,gradual typing,static typing},
   month = {10},
   pages = {17-24},
   publisher = {Association for Computing Machinery},
   title = {A Gradual Type System for Elixir},
   year = {2020},
}
